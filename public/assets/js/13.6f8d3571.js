(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{529:function(n,a,t){"use strict";t.r(a);var e=t(7),s=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"javascript-编程语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-编程语言"}},[n._v("#")]),n._v(" JavaScript 编程语言")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("bit < byte < KB < MB < GB < TB \n位(bit) 1bit可已保存一个0或者1(最小的存储单位)\n字节(byte)：1B = 8b\n千字节(KB)：1KB = 1024B\n兆字节(MB)：1MB = 1025KB\n吉字节(GB)：1GB = 1024MB\n太子节(TB)：1TB = 1025GB\n")])])]),t("h2",{attrs:{id:"javascript历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript历史"}},[n._v("#")]),n._v(" JavaScript历史")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("布兰登.艾奇(Brendan 1961年~)\n运行在客户端的 脚本语言\n渲染引擎：用来解析HTML和CSS ，俗称内核，\nJS引擎：\n")])])]),t("h2",{attrs:{id:"javascript组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript组成"}},[n._v("#")]),n._v(" JavaScript组成")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("ECMAScript: JavaScript语法\nDOM：页面文档对象模型   \nBOM：浏览器对象模型\n")])])]),t("h2",{attrs:{id:"js-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-变量"}},[n._v("#")]),n._v(" js 变量")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1.变量的概述\n    变量就是 一个装东西的盒子。\n    变量是用于存放数据的容器，通过变量名获取数据，甚至修改数据\n2.变量的使用\n    var age // 声明变量\n3.数据类型\n    js 是动态语言，变量的数据类型是可以变化的\n    简单数据类型：Number  Boolean  String Undefined  Null\n    复杂数据类型：Object\n    typeof num  检测数据类型\n    数据类型转换：\n        num.toString()  转换为字符串类型\n        String(num)     转换为字符串\n        \"字符串\"+num    转换为字符串\n\n        parseInt(String)    转换为整数数值型\n        parseFloat('3.14')  转换为浮点类型\n        Number('String')    强制转换为数值型\n4.运算符\n    递增(++)    \n    递减(--)    放在变量后：先返回原值 在加 1       放在变量前:        \n    ===   要求 数据类型，值完全相等\n    ==    要求，值相等\n    && 逻辑与，简称‘and’        两侧都为 true 结果为 true，有一侧为false，结果为false\n    || 逻辑或，简称‘or’         两测只要有一个 true，结果为 true，两侧都为false，结果为false\n    ！ 逻辑非，简称‘not’   \n    逻辑与(&&)中断  （123 && 456） 表达式 1 为真，则返回表达式 2 ，表达式 1 为假，返回表达式 1\n    逻辑或(||)中断  （123 || 456） 表达式 1 为真，则返回表达式 1 ，表达式 1 为假，返回表达式 2\n\n    8 > 5 ? '真'：'假'   条件表达式 ？ 表达式1 ： 表达式2    如果表达式为真，则返回表达式1， 反之为假\n")])])]),t("h2",{attrs:{id:"循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[n._v("#")]),n._v(" 循环")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("for循环的执行过程。for(let i=1; i<=100;i++){confirm.log('要执行的语句')}\n    1.先执行 i=1；\n    2.在执行 i <= 100;\n    3.在执行 {} 里面的表达式\n    4.在执行 i++;\n    5.在执行 i<= 100;\n    6.在执行 {} 里面的表达式\n \nwhile(表达式){ '执行语句' } 循环  当条件表达式为true时，执行循环体，否则退出。\n\ndo{ '执行语句' }while(表达式) 先执行语句，在验证表达式\n\ncontinue 跳出本次循环，执行下次循环\nbreak   跳出整个循环\n")])])]),t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[n._v("#")]),n._v(" 数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1.通过new 创建数组\n    let arr = new Array()\n2.通过数组字面量创建数组\n    let arr = []\n\njoin()  join(separator): 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。 \npush()和pop()\nshift() 和 unshift()\nsort()\nreverse()\nconcat()\nslice()\nsplice()\nindexOf()和 lastIndexOf() （ES5新增）\nforEach() （ES5新增）\nmap() （ES5新增）\nfilter() （ES5新增）\nevery() （ES5新增）\nsome() （ES5新增）\nreduce()和 reduceRight() （ES5新增）\n")])])]),t("h2",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[n._v("#")]),n._v(" 函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1.函数的概念：封装一个可以被重复调用的代码块 function get(num1,num2){}\n2.函数的使用：\n    1）声明函数 function 函数名(参数1，参数2){}   函数名一般是小写\n    2）调用函数 函数名(参数1，参数2)\n3.函数的参数\n    形参：在声明函数的小括号里面是形参(形式上的参数)\n    实参：在函数调用的小括号里是实参(实际的参数)\n4.arguments的使用\n    arguments对象中存储了传递的所有实参\n    伪数组: 并不是真正的数组\n        1）具有数组的length属性，\n        2）按照索引的方式进行存储\n        3）他没有真正数组的一些方法 如pop() push()\n5.函数的声明方式\n    1)命名函数：function fn(){}\n    2）let 变量名 = function fu(){}\n")])])]),t("h2",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[n._v("#")]),n._v(" 作用域")]),n._v(" "),t("h2",{attrs:{id:"创建对象的三种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的三种方式"}},[n._v("#")]),n._v(" 创建对象的三种方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1.通过字面量创建对象\n    let data = {name:'name'}\n2.通过new Object() 创建对象\n    let data = new Object()  data.name = 'name'\n3.通过构造函数创建对象\n    new people(name){ this.name = name }\n\n构造函数，泛指某一大类，\n对象，实实在在存在的指某一个具体的事物\nnew 在执行的时候四件事情\n    1.在内存中创建一个新的空对象。\n    2.让this指向这个新的对象\n    3.执行构造函数里面的代码，给这个新对象添加属性和方法\n    4.返回这个新对象\n\n4.遍历对象\n    for in 遍历对象，for(变量 in 对象) {console.log(k，对象[k]) k: 得到属性名 对象[k]：得到属性值 }\n")])])]),t("h2",{attrs:{id:"内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[n._v("#")]),n._v(" 内置对象")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("javascript 中对象分为3中，自定义对象，内置对象，浏览器对象。前面两种是js基础，属于ECMAScript;\nMath对象\n    Math.PI  圆周率\n    Math.floot()    向下取整\n    Math.ceil()     向上取整\n    Math.round()    四舍五入 \n    Math.abs()      绝对值\n    Math.max        最大值\n    Math.ramdom()   随机返回一个小数  \n\nDate对象\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);